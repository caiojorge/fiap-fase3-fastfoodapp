basePath: /kitchencontrol/api/v1
definitions:
  shared.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  usecase.CheckPaymentOutputDTO:
    properties:
      gatewayTransactionID:
        type: string
      orderID:
        type: string
      paymentApproved:
        type: boolean
      status:
        type: string
    type: object
  usecase.CheckoutConfirmationInputDTO:
    properties:
      order_id:
        type: string
      status:
        type: string
    required:
    - order_id
    - status
    type: object
  usecase.CheckoutConfirmationOutputDTO:
    properties:
      checkout_id:
        type: string
      gateway_transaction_id:
        type: string
      order_id:
        type: string
      qrcode:
        type: string
      status:
        type: string
    required:
    - checkout_id
    - gateway_transaction_id
    - order_id
    - qrcode
    - status
    type: object
  usecase.CheckoutInputDTO:
    properties:
      discont_coupon:
        description: valor de desconto... só uma ideia nesse momento.
        type: number
      gateway_name:
        description: nome do gateway (nesse caso, mercado livre fake)
        type: string
      gateway_token:
        description: id ou token para uso no gateway
        type: string
      notification_url:
        description: webhook para receber a confirmação do pagamento
        type: string
      order_id:
        description: o ID do pedido que será pago
        type: string
      sponsor_id:
        description: ID do patrocinador
        type: integer
    type: object
  usecase.CheckoutOutputDTO:
    properties:
      gateway_transaction_id:
        description: ID de transação gerado pelo gateway
        type: string
      id:
        description: ID do checkout
        type: string
      order_id:
        description: Identificação da ordem (pedido)
        type: string
    type: object
  usecase.CheckoutReprocessingInputDTO:
    properties:
      notification_url:
        description: webhook para receber a confirmação do pagamento
        type: string
      sponsor_id:
        type: string
    type: object
  usecase.CheckoutReprocessingOutputDTO:
    properties:
      checkout_id:
        type: string
      gateway_transaction_id:
        type: string
      order_id:
        type: string
      qrcode:
        type: string
      status:
        type: string
    required:
    - checkout_id
    - gateway_transaction_id
    - order_id
    - qrcode
    - status
    type: object
  usecase.CustomerFindAllOutputDTO:
    properties:
      cpf:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
  usecase.CustomerFindByCpfOutputDTO:
    properties:
      cpf:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
  usecase.CustomerRegisterInputDTO:
    properties:
      cpf:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
  usecase.CustomerRegisterOutputDTO:
    properties:
      cpf:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
  usecase.CustomerUpdateInputDTO:
    properties:
      cpf:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
  usecase.CustomerUpdateOutputDTO:
    properties:
      cpf:
        type: string
      email:
        type: string
      name:
        type: string
    type: object
  usecase.FindAllProductOutputDTO:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  usecase.FindProductByCategoryOutputDTO:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  usecase.FindProductByIDOutputDTO:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  usecase.KitchenCookingInputDTO:
    properties:
      order_id:
        type: string
    type: object
  usecase.KitchenCookingOutputDTO:
    properties:
      customer_id:
        type: string
      estimated_time:
        type: string
      items:
        items:
          type: string
        type: array
      kitchen_id:
        type: string
      order_id:
        type: string
      queue:
        type: string
      status:
        type: string
    type: object
  usecase.KitchenDeliveryInputDTO:
    properties:
      order_id:
        type: string
    type: object
  usecase.KitchenDeliveryOutputDTO:
    properties:
      customer_id:
        type: string
      estimated_time:
        type: string
      items:
        items:
          type: string
        type: array
      kitchen_id:
        type: string
      order_id:
        type: string
      queue:
        type: string
      status:
        type: string
    type: object
  usecase.KitchenFindAllAOutputDTO:
    properties:
      created_at:
        type: string
      estimated_time:
        type: string
      id:
        type: string
      order_id:
        type: string
      queue:
        type: string
    type: object
  usecase.KitchenNotifierOutputDTO:
    properties:
      customer_id:
        type: string
      estimated_time:
        type: string
      id:
        type: string
      items:
        items:
          type: string
        type: array
      order_id:
        type: string
      queue:
        description: ordem na fila de preparo
        type: string
      status:
        type: string
    type: object
  usecase.MonitorKitchenOutputDTO:
    properties:
      created_at:
        type: string
      delivery_number:
        type: string
      estimated_time:
        type: string
      id:
        type: string
      order_id:
        type: string
      queue:
        type: string
      status:
        type: string
    type: object
  usecase.OrderCreateInputDTO:
    properties:
      cpf:
        type: string
      items:
        items:
          $ref: '#/definitions/usecase.OrderItemCreateInputDTO'
        type: array
    type: object
  usecase.OrderCreateOutputDTO:
    properties:
      created_at:
        type: string
      customercpf:
        type: string
      delivery_number:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/usecase.OrderItemDTO'
        type: array
      status:
        type: string
      total:
        type: number
    type: object
  usecase.OrderFindAllOutputDTO:
    properties:
      created_at:
        type: string
      customercpf:
        type: string
      delivery_number:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/usecase.OrderItemDTO'
        type: array
      status:
        type: string
      total:
        type: number
    type: object
  usecase.OrderFindByIdOutputDTO:
    properties:
      created_at:
        type: string
      customercpf:
        type: string
      delivery_number:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/usecase.OrderItemDTO'
        type: array
      status:
        type: string
      total:
        type: number
    type: object
  usecase.OrderFindByParamOutputDTO:
    properties:
      created_at:
        type: string
      customercpf:
        type: string
      delivery_number:
        type: string
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/usecase.OrderItemDTO'
        type: array
      status:
        type: string
      total:
        type: number
    type: object
  usecase.OrderItemCreateInputDTO:
    properties:
      productid:
        type: string
      quantity:
        type: integer
    type: object
  usecase.OrderItemDTO:
    properties:
      id:
        type: string
      price:
        type: number
      productid:
        type: string
      quantity:
        type: integer
      status:
        type: string
    type: object
  usecase.RegisterProductInputDTO:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  usecase.RegisterProductOutputDTO:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  usecase.UpdateProductInputDTO:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
  usecase.UpdateProductOutputDTO:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is fiap fase 2 challenge project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiap Fase 2 Challenge Clean Arch API - 9SOAT
  version: "1.0"
paths:
  /checkouts:
    post:
      consumes:
      - application/json
      description: 'Efetiva o pagamento do cliente, via fake checkout nesse momento,
        e deixa o pedindo em espera da confirmação do pagamento. A ordem muda de status
        nesse momento para checkout-confirmado. Req #1 - Checkout Pedido que deverá
        receber os produtos solicitados e retornar à identificação do pedido.'
      parameters:
      - description: cria novo Checkout
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecase.CheckoutInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.CheckoutOutputDTO'
        "400":
          description: invalid data
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Create Checkout
      tags:
      - Checkouts
  /checkouts/{id}/check/payment:
    get:
      consumes:
      - application/json
      description: 'Get details of an Checkout and Status of Payment by Order id.
        Req #2 - Consultar status de pagamento pedido, que informa se o pagamento
        foi aprovado ou não.'
      parameters:
      - description: Order id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.CheckPaymentOutputDTO'
        "400":
          description: Order ID is required
          schema:
            type: string
        "404":
          description: Order | Checkout not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Check Payment by Order ID
      tags:
      - Checkouts
  /checkouts/confirmation/payment:
    post:
      consumes:
      - application/json
      description: 'Confirma o pagamento do cliente, via fake checkout nesse momento,
        e libera o pedido para preparação. A ordem muda de status nesse momento, para
        pagamento aprovado. Req #1 - Webhook para receber confirmação de pagamento
        aprovado ou recusado. A implementação deve ser clara quanto ao Webhook.'
      parameters:
      - description: Webhook para finalizar o Checkout
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecase.CheckoutConfirmationInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.CheckoutConfirmationOutputDTO'
        "400":
          description: invalid data
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Webhook to confirm payment
      tags:
      - Checkouts
  /checkouts/reprocessing/payment:
    post:
      consumes:
      - application/json
      description: Reprocesso o pagamento. Ordens em checkout aprovado, com checkout
        criado podem ser reprocessadas. O reprocessamento é feito no gateway de pagamento.
        O checkout é atualizado com o status do pagamento e o pedido é notificado.
      parameters:
      - description: reprocessa o Checkout
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecase.CheckoutReprocessingInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.CheckoutReprocessingOutputDTO'
        "400":
          description: invalid data
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Reprocessa o Checkout
      tags:
      - Checkouts
  /customers:
    get:
      consumes:
      - application/json
      description: Get details of all customers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usecase.CustomerFindAllOutputDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all customers
      tags:
      - Customers
    post:
      consumes:
      - application/json
      description: Create Customer in DB
      parameters:
      - description: cria novo cliente
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecase.CustomerRegisterInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.CustomerRegisterOutputDTO'
        "400":
          description: invalid data
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: customer already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create Customer
      tags:
      - Customers
  /customers/{cpf}:
    get:
      consumes:
      - application/json
      description: Get details of a customer by cpf
      parameters:
      - description: Customer cpf
        in: path
        name: cpf
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.CustomerFindByCpfOutputDTO'
        "404":
          description: Customer not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a customer
      tags:
      - Customers
    put:
      consumes:
      - application/json
      description: Update details of a customer by cpf
      parameters:
      - description: Customer cpf
        in: path
        name: cpf
        required: true
        type: string
      - description: Customer data
        in: body
        name: Customer
        required: true
        schema:
          $ref: '#/definitions/usecase.CustomerUpdateInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.CustomerUpdateOutputDTO'
        "400":
          description: Invalid data
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Customer not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a customer
      tags:
      - Customers
  /kitchens/orders/cooking:
    post:
      consumes:
      - application/json
      description: Busca a ordem e o ticket da cozinha; move o status para o próximo
        da fase de preparo e faz o delivery se estiver finalizado.
      parameters:
      - description: indica a ordem a ser trabalhada pela cozinha
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecase.KitchenCookingInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usecase.KitchenCookingOutputDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Busca a ordem e o ticket da cozinha; move o status para o próximo da
        fase de preparo e faz o delivery se estiver finalizado.
      tags:
      - Kitchens
  /kitchens/orders/delivery:
    post:
      consumes:
      - application/json
      description: Busca ordem que esta pronta, registra o delivery e finaliza a ordem
      parameters:
      - description: indica a ordem que será finalizada
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecase.KitchenDeliveryInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usecase.KitchenDeliveryOutputDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Busca ordem que esta pronta, registra o delivery e finaliza a ordem
      tags:
      - Kitchens
  /kitchens/orders/flow:
    get:
      consumes:
      - application/json
      description: Retorna as ordens que estão na cozinha em alguma etapa do preparo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usecase.KitchenFindAllAOutputDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: retorna todas as ordens que estão na cozinha
      tags:
      - Kitchens
  /kitchens/orders/monitor:
    get:
      consumes:
      - application/json
      description: Retorna uma lista de ordens e seus status, ordenado por recebido,
        em preparo e pronto, e por ordem de chegada tbm, e o tempo estimado e o delivery
        number para retirada do pedido
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usecase.MonitorKitchenOutputDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Busca ordens que estão na cozinha e estão sendo preparadas (ou na fila
        de preparo)
      tags:
      - Kitchens
  /kitchens/orders/notifier:
    post:
      consumes:
      - application/json
      description: Retorna as ordens pagas e não notificadas, notifica a cozinha e
        atualiza o status da ordem para recebida pela cozinha
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usecase.KitchenNotifierOutputDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Busca ordens pagas e não notificadas, notifica a cozinha e atualiza
        o status da ordem para recebida pela cozinha. A ideia é que algum job chame
        esse endpoint para ficar buscando ordens para a cozinha
      tags:
      - Kitchens
  /orders:
    get:
      consumes:
      - application/json
      description: Retorna todos os pedidos (orders) registrados no sistema. Se não
        houver pedidos, retorna um erro (404).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usecase.OrderFindAllOutputDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get all orders
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Cria um peddo (order) no sistema. O cliente (customer) pode ou
        não de identificar. Se o cliente não se identificar, o pedido será registrado
        como anônimo. O produto, porém, deve ter sido previamente cadastrado.
      parameters:
      - description: cria nova Order
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecase.OrderCreateInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.OrderCreateOutputDTO'
        "400":
          description: invalid data
          schema:
            type: string
        "409":
          description: Order already exists
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: Create Order
      tags:
      - Orders
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a Order and their items by id
      parameters:
      - description: Order id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.OrderFindByIdOutputDTO'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Order not found
          schema:
            type: string
      summary: Get a Order by id
      tags:
      - Orders
  /orders/confirmed:
    get:
      consumes:
      - application/json
      description: Retorna todos os pedidos (orders) registrados no sistema. Se não
        houver pedidos, retorna um erro (404).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usecase.OrderFindByParamOutputDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get all confirmed orders
      tags:
      - Orders
  /orders/paid:
    get:
      consumes:
      - application/json
      description: Retorna todos os pedidos (orders) registrados no sistema que tenham
        status de pagamento confirmado. Se não houver pedidos, retorna um erro (404).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usecase.OrderFindByParamOutputDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get all confirmed orders
      tags:
      - Orders
  /orders/pending:
    get:
      consumes:
      - application/json
      description: Retorna todos os pedidos (orders) registrados no sistema sem o
        pagamento confirmado. Se não houver pedidos, retorna um erro (404).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usecase.OrderFindByParamOutputDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get all orders not confirmed
      tags:
      - Orders
  /products:
    get:
      consumes:
      - application/json
      description: Get details of all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usecase.FindAllProductOutputDTO'
            type: array
        "400":
          description: Invalida data
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: No products foundr
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Creates a new product in the database
      parameters:
      - description: New Product Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usecase.RegisterProductInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created
          schema:
            $ref: '#/definitions/usecase.RegisterProductOutputDTO'
        "400":
          description: Invalid data format or missing fields
          schema:
            $ref: '#/definitions/shared.ErrorResponse'
        "409":
          description: Product already exists
          schema:
            $ref: '#/definitions/shared.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/shared.ErrorResponse'
      summary: Create a new product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete details of a Product by id
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted
          schema:
            type: string
        "400":
          description: Invalid data
          schema:
            type: string
      summary: Delete a Product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Get details of a Product by id
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usecase.FindProductByIDOutputDTO'
        "404":
          description: Product not found
          schema:
            type: string
      summary: Get a Product
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update details of a Product by id
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: string
      - description: Product data
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/usecase.UpdateProductInputDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated
          schema:
            $ref: '#/definitions/usecase.UpdateProductOutputDTO'
        "400":
          description: Invalid data
          schema:
            type: string
        "404":
          description: Product not found
          schema:
            type: string
      summary: Update a Product
      tags:
      - Products
  /products/category/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a Product by category
      parameters:
      - description: Product category
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usecase.FindProductByCategoryOutputDTO'
            type: array
        "404":
          description: Product not found
          schema:
            type: string
        "500":
          description: Product not found
          schema:
            type: string
      summary: Get a Product by category
      tags:
      - Products
swagger: "2.0"
