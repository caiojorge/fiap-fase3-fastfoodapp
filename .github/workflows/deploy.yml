name: Build and Deploy to EKS

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
          # Se precisar assumir a RoleLab:
          # role-to-assume: ${{ secrets.AWS_ROLE_ARN }}

      # 1) Terraform para criar/atualizar o ECR
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -var="aws_region=us-east-1" -var="ecr_repository_name=fiap-rocks"

      - name: Terraform Apply
        id: tf_apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -var="aws_region=us-east-1" -var="ecr_repository_name=fiap-rocks"

      # 2) Ler a saÃ­da (URL) do ECR gerado pelo Terraform
      - name: Get ECR URL
        id: get_ecr_url
        working-directory: ./terraform
        run: |
          echo "ECR_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV

      # 3) Login no ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 4) Build & Push da imagem usando a URL do ECR
      - name: Docker Build and Push
        run: |
          IMAGE_TAG="latest"
          echo "Usando ECR_URL=$ECR_URL"
          
          docker build -t $ECR_URL:$IMAGE_TAG .
          docker push $ECR_URL:$IMAGE_TAG

      # 5) Atualizar kubeconfig (para acessar EKS)
      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name my-eks-cluster --region us-east-1
      
      - name: Replace secrets in YAML
        run: |
          sed -i 's|senha=|${{ secrets.MYSQL_USER_PASSWORD }}|g' k8s/secret.yaml

      - name: Replace HOST_NAME in ConfigMap
        run: |
          sed -i 's|localhost|${{ secrets.HOST_NAME_SECRET }}|g' k8s/configmap.yaml

      # 6) Deploy no EKS usando kubectl
      - name: Deploy to EKS
        run: |
          # Substituir a imagem do Deployment pela que acabamos de fazer push
          kubectl set image deployment/fiap-rocks-server fiap-rocks-server=$ECR_URL:latest || true

          # Aplica ou cria o Secret, ConfigMap, Deployment, Service, HPA:
          kubectl apply -f k8s/secret.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/server-deployment.yaml
          kubectl apply -f k8s/server-service.yaml
          kubectl apply -f k8s/server-hpa.yaml