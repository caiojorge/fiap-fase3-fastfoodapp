name: Deploy to EKS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fiap-rocks
  CLUSTER_NAME: my-eks-cluster
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Apply
      run: terraform apply -auto-approve  

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Replace ECR image URL in deployment file
      run: |
        ECR_IMAGE_URL="${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG"
        sed -i "s|\$ECR_IMAGE_URL|$ECR_IMAGE_URL|g" k8s/server-deployment.yaml

    - name: Configure kubectl
      run: |
        aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME

    - name: Deploy to EKS
      run: |
        # Aplica os recursos na ordem correta
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/server-service.yaml
        kubectl apply -f k8s/server-deployment.yaml
        kubectl apply -f k8s/server-hpa.yaml

    - name: Update ConfigMap with LoadBalancer URL
      run: |
        # Aguarda o LoadBalancer ficar disponível
        echo "Aguardando o LoadBalancer ficar disponível..."
        LB_HOST=$(kubectl get service fiap-rocks-server -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        while [ -z "$LB_HOST" ]; do
          sleep 10
          LB_HOST=$(kubectl get service fiap-rocks-server -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        done

        # Atualiza o ConfigMap com a URL do LoadBalancer
        echo "LoadBalancer URL: $LB_HOST"
        kubectl get configmap fiap-rocks-config -o yaml > configmap.yaml
        sed -i "s/HOST_NAME: \"\"/HOST_NAME: \"http:\/\/$LB_HOST\"/" configmap.yaml
        kubectl apply -f configmap.yaml

        # Reinicia o deployment para aplicar as mudanças
        kubectl rollout restart deployment fiap-rocks-server
