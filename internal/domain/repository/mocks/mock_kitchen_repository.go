// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/kitchen_repository.go

// Package mocksrepository is a generated GoMock package.
package mocksrepository

import (
	context "context"
	reflect "reflect"

	entity "github.com/caiojorge/fiap-challenge-ddd/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockKitchenRepository is a mock of KitchenRepository interface.
type MockKitchenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKitchenRepositoryMockRecorder
}

// MockKitchenRepositoryMockRecorder is the mock recorder for MockKitchenRepository.
type MockKitchenRepositoryMockRecorder struct {
	mock *MockKitchenRepository
}

// NewMockKitchenRepository creates a new mock instance.
func NewMockKitchenRepository(ctrl *gomock.Controller) *MockKitchenRepository {
	mock := &MockKitchenRepository{ctrl: ctrl}
	mock.recorder = &MockKitchenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKitchenRepository) EXPECT() *MockKitchenRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockKitchenRepository) Create(ctx context.Context, kt *entity.Kitchen) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, kt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockKitchenRepositoryMockRecorder) Create(ctx, kt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKitchenRepository)(nil).Create), ctx, kt)
}

// Delete mocks base method.
func (m *MockKitchenRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKitchenRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKitchenRepository)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockKitchenRepository) Find(ctx context.Context, id string) (*entity.Kitchen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*entity.Kitchen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockKitchenRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockKitchenRepository)(nil).Find), ctx, id)
}

// FindAll mocks base method.
func (m *MockKitchenRepository) FindAll(ctx context.Context) ([]*entity.Kitchen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*entity.Kitchen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockKitchenRepositoryMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockKitchenRepository)(nil).FindAll), ctx)
}

// FindByParams mocks base method.
func (m *MockKitchenRepository) FindByParams(ctx context.Context, params map[string]interface{}) ([]*entity.Kitchen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByParams", ctx, params)
	ret0, _ := ret[0].([]*entity.Kitchen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByParams indicates an expected call of FindByParams.
func (mr *MockKitchenRepositoryMockRecorder) FindByParams(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByParams", reflect.TypeOf((*MockKitchenRepository)(nil).FindByParams), ctx, params)
}

// Monitor mocks base method.
func (m *MockKitchenRepository) Monitor(ctx context.Context) ([]*entity.Kitchen, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Monitor", ctx)
	ret0, _ := ret[0].([]*entity.Kitchen)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Monitor indicates an expected call of Monitor.
func (mr *MockKitchenRepositoryMockRecorder) Monitor(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Monitor", reflect.TypeOf((*MockKitchenRepository)(nil).Monitor), ctx)
}

// Update mocks base method.
func (m *MockKitchenRepository) Update(ctx context.Context, kt *entity.Kitchen) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, kt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockKitchenRepositoryMockRecorder) Update(ctx, kt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKitchenRepository)(nil).Update), ctx, kt)
}
