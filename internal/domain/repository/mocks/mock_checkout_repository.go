// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/repository/checkout_repository.go

// Package mocksrepository is a generated GoMock package.
package mocksrepository

import (
	context "context"
	reflect "reflect"

	entity "github.com/caiojorge/fiap-challenge-ddd/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockCheckoutRepository is a mock of CheckoutRepository interface.
type MockCheckoutRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCheckoutRepositoryMockRecorder
}

// MockCheckoutRepositoryMockRecorder is the mock recorder for MockCheckoutRepository.
type MockCheckoutRepositoryMockRecorder struct {
	mock *MockCheckoutRepository
}

// NewMockCheckoutRepository creates a new mock instance.
func NewMockCheckoutRepository(ctrl *gomock.Controller) *MockCheckoutRepository {
	mock := &MockCheckoutRepository{ctrl: ctrl}
	mock.recorder = &MockCheckoutRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckoutRepository) EXPECT() *MockCheckoutRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCheckoutRepository) Create(ctx context.Context, checkout *entity.Checkout) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, checkout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCheckoutRepositoryMockRecorder) Create(ctx, checkout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCheckoutRepository)(nil).Create), ctx, checkout)
}

// Delete mocks base method.
func (m *MockCheckoutRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCheckoutRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCheckoutRepository)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockCheckoutRepository) Find(ctx context.Context, id string) (*entity.Checkout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*entity.Checkout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCheckoutRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCheckoutRepository)(nil).Find), ctx, id)
}

// FindAll mocks base method.
func (m *MockCheckoutRepository) FindAll(ctx context.Context) ([]*entity.Checkout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*entity.Checkout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCheckoutRepositoryMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCheckoutRepository)(nil).FindAll), ctx)
}

// FindbyOrderID mocks base method.
func (m *MockCheckoutRepository) FindbyOrderID(ctx context.Context, id string) (*entity.Checkout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindbyOrderID", ctx, id)
	ret0, _ := ret[0].(*entity.Checkout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindbyOrderID indicates an expected call of FindbyOrderID.
func (mr *MockCheckoutRepositoryMockRecorder) FindbyOrderID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindbyOrderID", reflect.TypeOf((*MockCheckoutRepository)(nil).FindbyOrderID), ctx, id)
}

// Update mocks base method.
func (m *MockCheckoutRepository) Update(ctx context.Context, checkout *entity.Checkout) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, checkout)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCheckoutRepositoryMockRecorder) Update(ctx, checkout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCheckoutRepository)(nil).Update), ctx, checkout)
}

// UpdateStatus mocks base method.
func (m *MockCheckoutRepository) UpdateStatus(ctx context.Context, id, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockCheckoutRepositoryMockRecorder) UpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockCheckoutRepository)(nil).UpdateStatus), ctx, id, status)
}
